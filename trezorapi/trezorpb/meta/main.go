// meta is a program for generating the marshal code.
package main

import (
	"fmt"
	"strings"

	"github.com/trezor/trezord-go/trezorapi/trezorpb"
)

const start = `// Code generated by trezorpb-meta, do not edit

package marshal

import (
	"github.com/golang/protobuf/proto"
	"github.com/trezor/trezord-go/trezorapi/trezorpb"
	"github.com/trezor/trezord-go/trezorapi/trezortypes"
)
`

const marshalStart = `
func Marshal(msg proto.Message) (*trezortypes.Message, error) {
	var t trezorpb.MessageType
	switch msg.(type) {
`

const marshalEnd = `
	}
	marshalled, err := proto.Marshal(msg)
	if err != nil {
		return nil, err
	}

	return &trezortypes.Message{
		Kind: uint16(t),
		Data: marshalled,
	}, nil
}

`

const unmarshalStart = `func Unmarshal(msg *trezortypes.Message) (proto.Message, error) {
	var protomsg proto.Message
	switch msg.Kind {
`

const unmarshalEnd = `
	}
	err := proto.Unmarshal(msg.Data, protomsg)
	if err != nil {
		return nil, err
	}
	return protomsg, nil
}`

func main() {
	code := start
	msgs := make([]string, 0, len(trezorpb.MessageType_value))
	for m := range trezorpb.MessageType_value {
		sm := strings.TrimPrefix(m, "MessageType_")
		msgs = append(msgs, sm)
	}
	code += getMarshalCode(msgs)
	code += getUnmarshalCode(msgs)
	code += strings.TrimRight(code, "\n")
	fmt.Println(code)
}

func getMarshalCode(msgs []string) string {
	code := marshalStart
	for _, m := range msgs {
		code += fmt.Sprintf("\tcase *trezorpb.%s:\n", m)
		code += fmt.Sprintf("\t\tt = trezorpb.MessageType_MessageType_%s\n", m)
	}
	return code + marshalEnd
}

func getUnmarshalCode(msgs []string) string {
	code := unmarshalStart
	for _, m := range msgs {
		code += fmt.Sprintf("\tcase uint16(trezorpb.MessageType_MessageType_%s):\n", m)
		code += fmt.Sprintf("\t\tprotomsg = &trezorpb.%s{}\n", m)
	}
	return code + unmarshalEnd
}
